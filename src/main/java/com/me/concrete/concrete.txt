模版方法模式介绍
在软件开发中，有时会遇到类似的情况，某个方法的实现需要多个步骤，其中有些步骤是固定的，而有些步骤并不固定，存在可变性。
为了提高代码的复用性和系统的灵活性，可以使用模板方法模式来应对这类情况。

模版方法模式定义
定义一个操作中的算法框架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重定义算法的某些特定步骤。

AbstractClass：抽象类，定义了一套算法。 AbstractSwordsman
ConcreteClass：具体实现类。ZhangWuJi ZhangSanFeng

优点
模板方法模式通过把不变的行为搬移到超类，去除了子类中的重复代码。
子类实现算法的某些细节，有助于算法的扩展。
缺点
每个不同的实现都需要定义一个子类，这会导致类的个数的增加，设计更加抽象。
使用场景
各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。
面对重要复杂的算法，可以把核心算法设计为模版方法，周边相关细节功能则有各个子类实现。
需要通过子类来决定父类算法中某个步骤是否执行，实现子类对父类的反向控制。
